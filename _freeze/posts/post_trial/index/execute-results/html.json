{
  "hash": "f3633e2764daa93ab9e4bf89ffd4c320",
  "result": {
    "markdown": "---\ntitle: \"Re-usable code for quick data visualization with `ggplot`\"\ndescription: \"\"\nauthor:\n  - name: Daniel Sánchez García\n    url: https://danielsangarci.netlify.app/\n    orcid: 0000-0002-0710-6292\ndate: 28 12 2023\ndate-format: long\ncategories: [ggplot2] # self-defined categories\ncitation: \n  url: https://danielsangarci.netlify.app/posts/post_trial/ \nimage: preview-image.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nVisualizing data is an important part of communicating results, but it can turn into a tricky coding process when you need to plot your data in a very specific way. Not even talking if you expect having graphs with a similar looking along all your results.\n\nThis is the quick way I use to plot my data to get a consistent data visualization for all my related results.\n\nFirst of all, I start by specifying the common settings I want for the aesthetics of all my graphs. This first bunch of setting specify font, line and dot size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext.size <- 8\ntitle.size <- 9\nstrip.size <- 9\npoint.size <- 1\nline.size <- 0.3\ndot.size <- 1\n```\n:::\n\n\nThe second bunch of objects specify different color palettes for graphs with different amount of groups (from 1 to 6). I designed this palette with complementary colors following the recommendations from Lisa Charlotte Muth in [\"How to pick more beautiful colors for your data visualizations\"](https://blog.datawrapper.de/beautifulcolors/). If you design your own palettes don\\`t hesitate to share with me :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor1 <- \"#2C6594\"\ncolor2 <- \"#239081\"\ncolor3 <- \"#2AAA51\"\ncolor4 <- \"#E69C38\"\ncolor5 <- \"#E67E38\"\ncolor6 <- \"#E64C38\"\ncolor7 <- \"gray90\"\n\npalette1 <- c(color1)\npalette2 <- c(color1, color4)\npalette3 <- c(color1, color4, color7)\npalette4 <- c(color1, color2, color4, color5)\npalette5 <- c(color1, color2, color4, color5, color7)\npalette6 <- c(color1, color2, color3, color4, color5, color6)\n```\n:::\n\n\nThis settings will be just created once at the beginning of you script, and will be applied to as many graphs as you create getting a consistent data visualization.\n\nNow that the common settings have been already specified we can focus on the data we want to plot. I will use the public dataset `iris` for this example. I start creating three objects, one for the dataset and two more for the X and Y variables. These are the only three objects that need to be modified to adapt the code to different datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(datasets)\ndata(iris)\n\ndf <- iris\nvariabley <- df$Sepal.Length\nvariablex <- df$Species\n```\n:::\n\n\nAnd... here we go a custom ggplot code to plot your data in a consistent way with your favourite settings in just a minute. The code include all settings previously specified in our objects to easily change several values with a single modification.\n\n\n::: {.cell layout-align=\"center\" fig.asp='0.7'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nplot1 <- ggplot(data=df, aes(x=variablex, y=variabley, fill = variablex))+\n  geom_boxplot(notch=T)+\n  scale_x_discrete(name = \"Variable X\")+\n  scale_y_continuous(name = \"Variable Y\", limits = c(min(variabley),max(variabley)*1.03))+\n  scale_fill_manual(name = \"Variable X\", values = palette3)+\n  ggtitle(\"a)\")+\n  theme(axis.title.x = element_text(size=title.size, color = 'black', margin=margin(t=6, r=0, b=0, l=0)),\n        axis.title.y = element_text(size=title.size, color = 'black', margin=margin(t=0, r=6, b=0, l=0)),\n        axis.text.x = element_text(size=text.size, color = 'black'),\n        axis.text.y = element_text(size=text.size, colour = 'black'),\n        axis.line=element_line(size=line.size, colour='black'),\n        axis.ticks.x = element_line(),\n        axis.ticks.y = element_line(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(linewidth =  line.size, linetype = 'dotted', color = \"grey50\"),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = strip.size),\n        strip.background = element_blank(),\n        panel.border = element_rect(fill = NA, size = line.size),\n        panel.background = element_blank(),\n        legend.title = element_text(size = title.size, margin=margin(t=0, r=0, b=0, l=0)),\n        legend.text = element_text(size = text.size),\n        legend.position=\"none\",\n        legend.key.size = unit(0.2, \"in\"),\n        legend.margin=unit(c(0.1,0.1,0.1,0.1),\"cm\"),\n        plot.title = element_text(size = title.size, face = \"plain\", hjust = -0.05, vjust = 0),\n        plot.margin=unit(c(0.1,0.1,0.1,0.1), \"cm\"))\nplot1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center'}\n:::\n:::\n\n\nIf you want a graph different than a boxplot just substitute `geom_boxplot()` by `geom_bar()` for a barplot or `geom_point()` for a scatterplot. You can easily check all different options in the [ggplot2 Cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html#geoms).\n\nLooking forward to hearing your ideas on how to enhance the code for a more efficient data visualization. Don't hesitate to get in touch with me!\n\nYou can find here the whole code in a single code block here.\n\n``` r\n# SETTINGS FOR SIZE\ntext.size <- 8\ntitle.size <- 9\nstrip.size <- 9\npoint.size <- 1\nline.size <- 0.3\ndot.size <- 1\n\n#PALETTES\ncolor1 <- \"#2C6594\"\ncolor2 <- \"#239081\"\ncolor3 <- \"#2AAA51\"\ncolor4 <- \"#E69C38\"\ncolor5 <- \"#E67E38\"\ncolor6 <- \"#E64C38\"\ncolor7 <- \"gray90\"\n\npalette1 <- c(color1)\npalette2 <- c(color1, color4)\npalette3 <- c(color1, color4, color7)\npalette4 <- c(color1, color2, color4, color5)\npalette5 <- c(color1, color2, color4, color5, color7)\npalette6 <- c(color1, color2, color3, color4, color5, color6)\n\n#DATA\nlibrary(datasets)\ndata(iris)\n\ndf <- iris\nvariabley <- df$Sepal.Length\nvariablex <- df$Species\n\n#PLOT CODE\nlibrary(ggplot2)\nplot1 <- ggplot(data=df, aes(x=variablex, y=variabley, fill = variablex))+\n  geom_boxplot(notch=T)+\n  scale_x_discrete(name = \"Variable X\")+\n  scale_y_continuous(name = \"Variable Y\", limits = c(min(variabley),max(variabley)*1.03))+\n  scale_fill_manual(name = \"Variable X\", values = palette3)+\n  ggtitle(\"a)\")+\n  theme(axis.title.x = element_text(size=title.size, color = 'black', margin=margin(t=6, r=0, b=0, l=0)),\n        axis.title.y = element_text(size=title.size, color = 'black', margin=margin(t=0, r=6, b=0, l=0)),\n        axis.text.x = element_text(size=text.size, color = 'black'),\n        axis.text.y = element_text(size=text.size, colour = 'black'),\n        axis.line=element_line(size=line.size, colour='black'),\n        axis.ticks.x = element_line(),\n        axis.ticks.y = element_line(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(linewidth =  line.size, linetype = 'dotted', color = \"grey50\"),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = strip.size),\n        strip.background = element_blank(),\n        panel.border = element_rect(fill = NA, size = line.size),\n        panel.background = element_blank(),\n        legend.title = element_text(size = title.size, margin=margin(t=0, r=0, b=0, l=0)),\n        legend.text = element_text(size = text.size),\n        legend.position=\"none\",\n        legend.key.size = unit(0.2, \"in\"),\n        legend.margin=unit(c(0.1,0.1,0.1,0.1),\"cm\"),\n        plot.title = element_text(size = title.size, face = \"plain\", hjust = -0.03, vjust = 0),\n        plot.margin=unit(c(0.1,0.1,0.1,0.1), \"cm\"))\n```\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}